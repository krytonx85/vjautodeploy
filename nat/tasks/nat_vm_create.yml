
- name: Get PE Cluster Details for vm creation
  uri:
   url: https://{{ ansible_host }}:9440/PrismGateway/services/rest/v2.0/cluster
   url_username: "{{ api_username }}"
   url_password: "{{ pe_password }}"
   validate_certs: false
   force_basic_auth: true
   return_content: true
   body_format: json
   method: "GET"
   follow_redirects: all
   status_code: [200,201,202]
  debugger: on_failed
  register: pe_cluster_details

- name: Get network  List
  uri:
   url: https://127.0.0.1:9440/PrismGateway/services/rest/v2.0/networks
   url_username: "{{ api_username }}"
   url_password: "{{ pe_password }}"
   validate_certs: false
   force_basic_auth: true
   return_content: true
  register: network_list

- debug:
   msg: nat network name is "{{ nat_vars.public_net_details.network_name }}"



- name: get NAT Public Networks' UUID
  set_fact: 
   nat_network_uuid: "{{ network_list.json | to_json | from_json | json_query(queryfilter) }}"
  vars:
   queryfilter: "entities[?contains(name,'{{ nat_vars.public_net_details.network_name }}')].uuid | [0]"
  failed_when: not nat_network_uuid
   

- debug:
   msg: network uuid for NAT VM Network Selected  "{{ nat_vars.public_net_details.network_name }}" is {{ nat_network_uuid }}

- set_fact: 
   nat_cloud_init: |
    #cloud-config
    users:
     - name: root
       passwd: $1$wBi2Y68t$1ZHcaFD0afx8H1hNUn3PZ1
       lock_passwd: false
       ssh-authorized-keys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6b1lX6Lt+lnIWhlhvKO7BFv2O8JpyWsqyVgh0DvUVytnE1Ob9aaYK11CIyVN60LlDO1a5bfPidLXfSlTyfj8PqgLHkwHCMsZe5tIM54FUWZmqOnnHFU0lXq3LYG+hqi8NVwQMR38c16/wxJKtCggr0AiA2We00sWScBVLLGmWq1R7aUKf6mdjNmT2Pr3pyXS5takZ6xLBCXLKDu8MvgOrlXIUNdpAIJ1R7lNkDCiHt/mhMaPWf15ywa/KElg2UFEvbu3o/sQkiWaItcBIWF35MgO+Xa8UBx5p9Iqd7ADk49KHzWhidd2tMyd4aMiBKdeTSI5QaKacnMC/d6VONocj
    runcmd:
     - [ sh, -xc, "echo centos > /etc/hostname && echo DEVICE=eth0 > /etc/sysconfig/network-scripts/ifcfg-eth0 && echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo BOOTPROTO=none >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo ONBOOT=yes >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo USERCTL=no >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo IPV6INIT=no >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo PEERDNS=yes >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo TYPE=Ethernet >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo NETMASK={{ nat_vars.public_net_details.netmask }} >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo IPADDR={{ nat_vars.public_net_details.ip }} >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo GATEWAY={{ nat_vars.public_net_details.gateway[0] }} >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo ARP=yes >> /etc/sysconfig/network-scripts/ifcfg-eth0 && echo nameserver {{ nat_vars.public_net_details.dns }} >> /etc/resolv.conf"]
     - [ sh, -xc, "echo centos > /etc/hostname && echo DEVICE=eth1 > /etc/sysconfig/network-scripts/ifcfg-eth1 && echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo BOOTPROTO=none >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo ONBOOT=yes >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo USERCTL=no >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo IPV6INIT=no >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo PEERDNS=yes >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo TYPE=Ethernet >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo NETMASK={{ nat_vars.pv_net_details.netmask }} >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo IPADDR={{ nat_vars.pv_net_details.gateway }} >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo ARP=yes >> /etc/sysconfig/network-scripts/ifcfg-eth1 && echo nameserver {{ nat_vars.pv_net_details.dns }} >> /etc/resolv.conf"]
     - [ sh, -xc, "echo centos > /etc/hostname && echo DEVICE=eth2 > /etc/sysconfig/network-scripts/ifcfg-eth2 && echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo BOOTPROTO=none >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo ONBOOT=yes >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo USERCTL=no >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo IPV6INIT=no >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo PEERDNS=yes >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo TYPE=Ethernet >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo NETMASK={{ nat_vars.pv_net_details_2.netmask }} >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo IPADDR={{ nat_vars.pv_net_details_2.gateway }} >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo ARP=yes >> /etc/sysconfig/network-scripts/ifcfg-eth2 && echo nameserver {{ nat_vars.pv_net_details_2.dns }} >> /etc/resolv.conf"]
     - [ sh, -xc, "systemctl restart network" ]
- set_fact:
   vm_deploy_spec:
    spec:
      resources:
        num_threads_per_core: 1
        num_vcpus_per_socket: 2
        num_sockets: 2
        guest_customization:
         cloud_init:
          user_data: "{{ nat_cloud_init | string |  b64encode }}"
        memory_size_mib: 4000
        disk_list:
        - device_properties:
            device_type: "DISK"
          data_source_reference:
            is_direct_attach: true
            kind: "image"
            uuid: "{{ centos_image_uuid }}"
            name: "ansible_centos"
        nic_list:
        - ip_endpoint_list:
          - ip_type: "DHCP"
          subnet_reference:
            kind: "subnet"
            name: "{{ nat_vars.public_net_details.network_name }}"
            uuid: "{{ nat_network_uuid }}"
          is_connected: true
        - ip_endpoint_list:
          - ip_type: "DHCP"
          subnet_reference:
            kind: "subnet"
            name: "ansible_network"
            uuid: "{{ pv_net_uuid }}"
        - ip_endpoint_list:
          - ip_type: "DHCP"
          subnet_reference:
            kind: "subnet"
            name: "ansible_network_2"
            uuid: "{{ pv_net_uuid_2 }}"  
        power_state: "ON"
      cluster_reference:
        kind: cluster
        name: "{{ pe_cluster_details.json.name }}" 
        uuid: "{{ pe_cluster_details.json.uuid }}" 
      name: "ansible_nat_vm"
    metadata:
      kind: vm
  debugger: on_failed

- local_action: copy content={{ vm_deploy_spec | to_json }} dest=ansible_nat_vm.json

- name: Deploy VM 
  import_tasks:
   file: "../../common_tasks/submit_task_v3api.yaml"
  vars:
   endpoint_ip: "{{ pc_deploy_vars.pc_ip }}"
   endpoint_api_path: "api/nutanix/v3/vms"
   endpoint_api_method: "POST"
   endpoint_api_body: '{{ vm_deploy_spec | to_json }}'
   endpoint_api_task: "api/nutanix/v3/vms"
   endpoint_api_password: "{{ pc_deploy_vars.pc_password }}"
   endpoint_api_username: "admin"

- set_fact:
   vm_uuid: "{{ intent_status.json.metadata.uuid }}"

- name: sleep for 90 seconds and continue with play
  wait_for:
    timeout: 90
  delegate_to: localhost


- name: Add host to group 'just_created' with variable foo=42
  add_host:
    name: nat_vm
    ansible_host: "{{ nat_vars.public_net_details.ip }}"
    ansible_user: "root"
    ansible_ssh_pass: "nutanix/4u"


